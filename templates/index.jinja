<!DOCTYPE html>
<html lang="en_us">
<head>
    <title>Immersive Library</title>
    <link rel="stylesheet" href="{{ url_for('static', path='/style.css') }}">
    <script src="{{ url_for('static', path='/three.js') }}"></script>
    <script src="{{ url_for('static', path='/pnbt.js') }}"></script>
    <script src="{{ url_for('static', path='/embed.js') }}"></script>

    <style>
        body {
            height: 100vh;
            font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji";
        }

        .browser-container {
            max-width: 1700px;
            margin: 0 auto;
            padding: 20px;
        }

        .controls {
            display: flex;
            flex-wrap: wrap;
            gap: 14px;
            margin-bottom: 16px;

            padding: 20px;
            border: 1px solid #2b3136;
            border-radius: 14px;
            background: linear-gradient(180deg, #2b3136, #23282d);
            box-shadow: 0 8px 18px rgba(0, 0, 0, .35), inset 0 1px 0 rgba(255, 255, 255, .03);
        }

        .controls .spacer {
            flex: 1 1 auto;
        }

        .controls .right {
            margin-left: auto;
        }

        .control-item {
            min-width: 210px;
            margin-bottom: 10px;
            display: flex;
            flex-direction: column;
        }

        .control-item label {
            font-size: 12px;
            color: #aeb6bf;
        }

        .control-item select,
        .control-item input[type="text"] {
            appearance: none;
            -webkit-appearance: none;
            width: 100%;
            padding: 10px 38px 10px 12px;
            border-radius: 10px;
            border: 1px solid #3a4148;
            background: #20252a;
            color: #e9ecef;
            outline: none;
            transition: border-color .2s ease, box-shadow .2s ease, background .2s ease;
            box-shadow: inset 0 1px 0 rgba(255, 255, 255, .02);
        }

        .control-item select:hover,
        .control-item input[type="text"]:hover {
            border-color: #4a525a;
        }

        .control-item select:focus,
        .control-item input[type="text"]:focus {
            border-color: #6da8ff;
            box-shadow: 0 0 0 3px rgba(109, 168, 255, .15);
            background: #1d2227;
        }

        .select-wrap {
            position: relative;
        }

        .select-wrap::after {
            content: '';
            position: absolute;
            right: 12px;
            top: 50%;
            width: 0;
            height: 0;
            border-left: 6px solid transparent;
            border-right: 6px solid transparent;
            border-top: 7px solid #9aa4af;
            transform: translateY(-50%);
            pointer-events: none;
            transition: transform .15s ease;
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(386px, 1fr));
            gap: 20px;
        }

        .current-page {
            padding: 8px 14px;
            border: 1px solid #3a4148;
            border-radius: 10px;
            background: #20252a;
            color: #aeb6bf;
        }
    </style>
</head>

<body>
<div class="browser-container">
    <div class="controls">
        <div class="control-item">
            <label for="project">Project:</label>
            <div class="select-wrap">
                <select id="project">
                    {% for project in projects %}
                        <option value="{{ project }}">{{ project }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>

        <div class="control-item">
            <label for="sort">Sort by:</label>
            <div class="select-wrap">
                <select id="sort">
                    <option value="recommendations">Recommendations</option>
                    <option value="date">Date</option>
                    <option value="likes">Likes</option>
                    <option value="title">Title</option>
                    <option value="reports">Reports</option>
                </select>
            </div>
        </div>

        <div class="control-item">
            <label for="order">Order:</label>
            <div class="select-wrap">
                <select id="order">
                    <option value="true">Descending</option>
                    <option value="false">Ascending</option>
                </select>
            </div>
        </div>

        <div class="control-item">
            <label for="limit">Items per page:</label>
            <div class="select-wrap">
                <select id="limit">
                    <option value="4">4</option>
                    <option value="8">8</option>
                    <option value="16">16</option>
                </select>
            </div>
        </div>

        <div class="control-item">
            <label for="search">Search:</label>
            <input type="text" id="search" placeholder="Search by title, username, and tags">
        </div>

        <div class="spacer"></div>
        <div class="control-item right">
            <label>&nbsp;</label>
            <button id="login-btn" class="btn">
                <svg class="icon" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                    <path d="M10 17l5-5-5-5v3H3v4h7v3z"></path>
                    <path d="M19 3h-6v2h6v14h-6v2h6a2 2 0 002-2V5a2 2 0 00-2-2z"></path>
                </svg>
                <span>Login</span></button>
        </div>
    </div>

    <div id="content-grid" class="grid">
        <!-- Content will be loaded here -->
    </div>

    <div class="pagination">
        <button id="prev-page">&laquo; Previous</button>
        <div id="current-page" class="current-page">Page 1</div>
        <button id="next-page">Next &raquo;</button>
    </div>
</div>

<!--suppress ES6MissingAwait -->
<script>
    // Browser state
    const state = {
        project: document.getElementById('project').value,
        search: '',
        sort: document.getElementById('sort').value,
        descending: document.getElementById('order').value === 'true',
        limit: parseInt(document.getElementById('limit').value),
        offset: 0,
        page: 1
    };

    // Load content
    async function loadContent() {
        const contentGrid = document.getElementById('content-grid');
        contentGrid.innerHTML = '<p>Loading...</p>';

        try {
            // Build the URL with parameters
            let url = `/v2/content/${state.project}?`;
            url += `order=${state.sort}&`;
            url += `descending=${state.descending}&`;
            url += `limit=${state.limit}&`;
            url += `offset=${state.offset}`;

            // Add search terms as whitelist if provided
            if (state.search.trim()) {
                url += `&whitelist=${encodeURIComponent(state.search.trim())}`;
            }

            // Fetch content list
            const response = await fetch(url);
            const data = await response.json();

            if (data.contents && data.contents.length > 0) {
                contentGrid.innerHTML = '';

                // Process each content item
                for (const content of data.contents) {
                    const contentItem = document.createElement('div');
                    contentItem.className = 'card-interactive';
                    contentItem.id = `content-${content.contentid}`;
                    contentItem.setAttribute('role', 'button');
                    contentItem.setAttribute('tabindex', '0');
                    contentItem.title = `Open project ${content.contentid}`;
                    contentItem.style.position = 'relative';

                    const bodyId = `content-body-${content.contentid}`;
                    contentItem.innerHTML = `
                        <div id="${bodyId}"><p>Loading #${content.contentid}...</p></div>
                    `;
                    contentGrid.appendChild(contentItem);

                    // make the whole card clickable
                    const targetUrl = `/${state.project}/${content.contentid}`;
                    contentItem.addEventListener('click', () => {
                        window.location.href = targetUrl;
                    });
                    contentItem.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            window.location.href = targetUrl;
                        }
                    });

                    if (window.ImmersiveAuth && typeof window.ImmersiveAuth.getToken === 'function' && window.ImmersiveAuth.getToken()) {
                        const delBtn = document.createElement('button');
                        delBtn.textContent = 'Delete';
                        delBtn.className = 'btn';
                        delBtn.title = `Delete content #${content.contentid}`;
                        delBtn.style.position = 'absolute';
                        delBtn.style.top = '8px';
                        delBtn.style.right = '8px';
                        delBtn.style.zIndex = '2';
                        delBtn.style.padding = '6px 10px';
                        delBtn.style.fontSize = '12px';

                        delBtn.addEventListener('click', async (e) => {
                            e.stopPropagation();
                            e.preventDefault();
                            const ok = window.confirm(`Are you sure you want to delete content #${content.contentid}?`);
                            if (!ok) return;
                            try {
                                const resp = await fetch(`/v1/content/${state.project}/${content.contentid}`, {method: 'DELETE'});
                                if (resp.ok) {
                                    // remove the card from the grid
                                    contentItem.remove();
                                } else if (resp.status === 401 || resp.status === 403) {
                                    alert('Not allowed to delete this content.');
                                } else if (resp.status === 404) {
                                    alert('Content not found.');
                                } else {
                                    alert('Delete failed (' + resp.status + ').');
                                }
                            } catch (err) {
                                alert('Network error while deleting.');
                            }
                        });

                        contentItem.appendChild(delBtn);
                    }

                    embedContent(bodyId, state.project, content.contentid);
                }

                // Update page display
                document.getElementById('current-page').textContent = `Page ${state.page}`;
                document.getElementById('prev-page').disabled = state.page <= 1;

            } else {
                contentGrid.innerHTML = '<p>No content found</p>';
            }
        } catch (error) {
            contentGrid.innerHTML = `<p>Error: ${error.message}</p>`;
        }
    }

    // Event listeners for all controls
    document.getElementById('project').addEventListener('change', (e) => {
        state.project = e.target.value;
        state.page = 1;
        state.offset = 0;
        loadContent();
    });

    document.getElementById('sort').addEventListener('change', (e) => {
        state.sort = e.target.value;
        loadContent();
    });

    document.getElementById('order').addEventListener('change', (e) => {
        state.descending = e.target.value === 'true';
        loadContent();
    });

    document.getElementById('limit').addEventListener('change', (e) => {
        state.limit = parseInt(e.target.value);
        state.page = 1;
        state.offset = 0;
        loadContent();
    });

    document.getElementById('search').addEventListener('input', debounce((e) => {
        state.search = e.target.value;
        state.page = 1;
        state.offset = 0;
        loadContent();
    }, 500));

    document.getElementById('prev-page').addEventListener('click', () => {
        if (state.page > 1) {
            state.page--;
            state.offset = (state.page - 1) * state.limit;
            loadContent();
        }
    });
    document.getElementById('prev-page').addEventListener('keydown', (e) => {
        if ((e.key === 'Enter' || e.key === ' ') && state.page > 1) {
            e.preventDefault();
            state.page--;
            state.offset = (state.page - 1) * state.limit;
            loadContent();
        }
    });

    document.getElementById('next-page').addEventListener('click', () => {
        state.page++;
        state.offset = (state.page - 1) * state.limit;
        loadContent();
    });
    document.getElementById('next-page').addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
            e.preventDefault();
            state.page++;
            state.offset = (state.page - 1) * state.limit;
            loadContent();
        }
    });

    // Debounce function to limit the rate of function calls
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }

    // Initial load
    document.addEventListener('DOMContentLoaded', loadContent);
</script>
<script src="{{ url_for('static', path='/auth.js') }}"></script>
</body>
</html>